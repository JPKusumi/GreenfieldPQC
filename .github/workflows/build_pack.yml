name: Build and Pack NuGet

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Triggers on tags like v1.0.0, but publish is manual
  pull_request:
    branches: [ main ]

jobs:
  build-natives:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, arch: x64, rid: win-x64, libname: oqs.dll }
          - { os: windows-latest, arch: arm64, rid: win-arm64, libname: oqs.dll }  # Cross-compile ARM on x64 runner
          - { os: ubuntu-22.04, arch: x64, rid: linux-x64, libname: liboqs.so }
          - { os: ubuntu-22.04, arch: arm64, rid: linux-arm64, libname: liboqs.so }  # Cross-compile for ARM on 22.04
          - { os: macos-latest, arch: x64, rid: osx-x64, libname: liboqs.dylib }
          - { os: macos-14, arch: arm64, rid: osx-arm64, libname: liboqs.dylib }  # Native ARM runner

    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y cmake ninja-build gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake ninja

      - name: Setup Visual Studio environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.config.arch == 'arm64' && 'arm64' || 'x64' }}

      - name: Clone liboqs
        run: git clone --depth 1 https://github.com/open-quantum-safe/liboqs.git

      - name: Create toolchain file for Linux ARM64
        if: matrix.config.rid == 'linux-arm64'
        working-directory: liboqs
        run: |
          echo "set(CMAKE_SYSTEM_NAME Linux)" > toolchain-aarch64.cmake
          echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> toolchain-aarch64.cmake

      - name: Build liboqs (Windows)
        if: runner.os == 'Windows'
        working-directory: liboqs
        shell: cmd {0}
        env:
          ARCH: ${{ matrix.config.arch }}
        run: |
          mkdir build
          cd build
          if "%ARCH%" == "arm64" (
            cmake .. -G "NMake Makefiles" -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=YES -DOQS_USE_OPENSSL=OFF -DOQS_MINIMAL_BUILD="KEM_ML_KEM_512;KEM_ML_KEM_768;KEM_ML_KEM_1024;SIG_ML_DSA_44;SIG_ML_DSA_65;SIG_ML_DSA_87" -DOQS_OPT_TARGET=generic -DOQS_USE_CPU_EXTENSIONS=OFF -DOQS_DIST_BUILD=ON -DOQS_PERMIT_UNSUPPORTED_ARCHITECTURE=ON -DOQS_USE_AES_INSTRUCTIONS=OFF
          ) else (
            cmake .. -G "NMake Makefiles" -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=YES -DOQS_USE_OPENSSL=OFF -DOQS_MINIMAL_BUILD="KEM_ML_KEM_512;KEM_ML_KEM_768;KEM_ML_KEM_1024;SIG_ML_DSA_44;SIG_ML_DSA_65;SIG_ML_DSA_87" -DOQS_OPT_TARGET=generic -DOQS_USE_CPU_EXTENSIONS=OFF -DOQS_DIST_BUILD=ON -DOQS_USE_AES_INSTRUCTIONS=OFF
          )
          nmake

      - name: Build liboqs (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: liboqs
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.config.rid }}" = "linux-arm64" ]; then
            cmake .. -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=ON -DOQS_USE_OPENSSL=OFF -DOQS_MINIMAL_BUILD="KEM_ML_KEM_512;KEM_ML_KEM_768;KEM_ML_KEM_1024;SIG_ML_DSA_44;SIG_ML_DSA_65;SIG_ML_DSA_87" -DOQS_OPT_TARGET=generic -DCMAKE_TOOLCHAIN_FILE=../toolchain-aarch64.cmake
          else
            cmake .. -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=ON -DOQS_USE_OPENSSL=OFF -DOQS_MINIMAL_BUILD="KEM_ML_KEM_512;KEM_ML_KEM_768;KEM_ML_KEM_1024;SIG_ML_DSA_44;SIG_ML_DSA_65;SIG_ML_DSA_87" -DOQS_OPT_TARGET=generic
          fi
          ninja

      - name: Copy lib to standard location (Windows)
        if: runner.os == 'Windows'
        working-directory: liboqs
        shell: cmd {0}
        run: |
          mkdir build\artifact
          copy build\oqs.dll build\artifact\ || (echo DLL not found! & exit 1)

      - name: Copy lib to standard location (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: liboqs
        run: |
          mkdir -p build/artifact
          cp build/lib/${{ matrix.config.libname }} build/artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: oqs-${{ matrix.config.rid }}
          path: liboqs/build/artifact/${{ matrix.config.libname }}

  pack-nuget:
    needs: build-natives
    runs-on: ubuntu-latest  # Or windows if preferred

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Download all native artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy natives to runtimes
        run: |
          mkdir -p runtimes/win-x64/native runtimes/win-arm64/native runtimes/linux-x64/native runtimes/linux-arm64/native runtimes/osx-x64/native runtimes/osx-arm64/native
          cp artifacts/oqs-win-x64/oqs.dll runtimes/win-x64/native/ || true
          cp artifacts/oqs-win-arm64/oqs.dll runtimes/win-arm64/native/ || true
          cp artifacts/oqs-linux-x64/liboqs.so runtimes/linux-x64/native/ || true
          cp artifacts/oqs-linux-arm64/liboqs.so runtimes/linux-arm64/native/ || true
          cp artifacts/oqs-osx-x64/liboqs.dylib runtimes/osx-x64/native/ || true
          cp artifacts/oqs-osx-arm64/liboqs.dylib runtimes/osx-arm64/native/ || true

      - name: Build
        run: dotnet build -c Release

      - name: Pack NuGet
        run: dotnet pack -c Release --no-build

      - name: Upload NuGet artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: GreenfieldPQC/bin/Release/*.nupkg