name: Build and Pack NuGet

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Triggers on tags like v1.0.0, but publish is manual
  pull_request:
    branches: [ main ]

jobs:
  build-natives:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, arch: x64, rid: win-x64, libname: oqs.dll }
          - { os: windows-latest, arch: arm64, rid: win-arm64, libname: oqs.dll }  # Cross-compile ARM on x64 runner
          - { os: ubuntu-22.04, arch: x64, rid: linux-x64, libname: liboqs.so }
          - { os: ubuntu-22.04, arch: arm64, rid: linux-arm64, libname: liboqs.so }  # Cross-compile for ARM on 22.04
          - { os: macos-latest, arch: x64, rid: osx-x64, libname: liboqs.dylib }
          - { os: macos-14, arch: arm64, rid: osx-arm64, libname: liboqs.dylib }  # Native ARM runner

    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Restrict default repos to amd64 (Ubuntu ARM64)
        if: matrix.config.rid == 'linux-arm64'
        run: sudo sed -i -e '/^deb /s/deb /deb [arch=amd64] /' /etc/apt/sources.list

      - name: Add arm64 architecture and repos (Ubuntu ARM64)
        if: matrix.config.rid == 'linux-arm64'
        run: |
          sudo dpkg --add-architecture arm64
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main universe restricted multiverse" | sudo tee /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main universe restricted multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main universe restricted multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main universe restricted multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64.list

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libssl-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          if [ "${{ matrix.config.arch }}" = "arm64" ]; then
            sudo apt-get install -y libc6-dev:arm64 libstdc++-11-dev:arm64 libssl-dev:arm64
          fi

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja openssl@3
          echo "CMAKE: $(which cmake)"
          echo "NINJA: $(which ninja)"
          echo "OPENSSL: $(brew --prefix openssl@3)"

      - name: Clone liboqs
        run: git clone --depth 1 https://github.com/open-quantum-safe/liboqs.git

      - name: Setup CMake for cross-compile (Win ARM64)
        if: matrix.config.rid == 'win-arm64'
        uses: microsoft/setup-msbuild@v2
        with:
          platform: ARM64

      - name: Create toolchain file for Linux ARM64
        if: matrix.config.rid == 'linux-arm64'
        working-directory: liboqs
        run: |
          echo "set(CMAKE_SYSTEM_NAME Linux)" > toolchain-aarch64.cmake
          echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> toolchain-aarch64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> toolchain-aarch64.cmake

      - name: Build liboqs (Windows)
        if: runner.os == 'Windows'
        working-directory: liboqs
        shell: pwsh
        run: |
          mkdir build
          cd build
          if ("${{ matrix.config.arch }}" -eq "arm64") {
            cmake .. -G "Visual Studio 17 2022" -A ARM64 -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release
          } else {
            cmake .. -G "Visual Studio 17 2022" -A x64 -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release
          }
          cmake --build . --config Release

      - name: Build liboqs (Linux/macOS)
        if: runner.os != 'Windows'
        working-directory: liboqs
        run: |
          mkdir build
          cd build
          if [ "${{ runner.os }}" = "macOS" ]; then
            export OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
            cmake .. -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_INCLUDE_DIR=$OPENSSL_ROOT_DIR/include -DOPENSSL_LIBRARIES=$OPENSSL_ROOT_DIR/lib
          elif [ "${{ matrix.config.rid }}" = "linux-arm64" ]; then
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=../toolchain-aarch64.cmake -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release -DOPENSSL_USE_STATIC_LIBS=FALSE -DOPENSSL_ROOT_DIR=/usr/aarch64-linux-gnu -DOPENSSL_INCLUDE_DIR=/usr/aarch64-linux-gnu/include -DOPENSSL_CRYPTO_LIBRARY=/usr/aarch64-linux-gnu/lib/libcrypto.so -DOPENSSL_SSL_LIBRARY=/usr/aarch64-linux-gnu/lib/libssl.so
          else
            cmake .. -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_BUILD_TYPE=Release
          fi
          ninja

      - name: Copy lib to standard location
        working-directory: liboqs
        run: |
          mkdir -p build/artifact
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp build/bin/Release/oqs.dll build/artifact/ || cp build/bin/Release/*.dll build/artifact/
          else
            cp build/lib/${{ matrix.config.libname }} build/artifact/
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: oqs-${{ matrix.config.rid }}
          path: liboqs/build/artifact/${{ matrix.config.libname }}

  pack-nuget:
    needs: build-natives
    runs-on: ubuntu-latest  # Or windows if preferred

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download all native artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy natives to runtimes
        run: |
          mkdir -p runtimes/win-x64/native runtimes/win-arm64/native runtimes/linux-x64/native runtimes/linux-arm64/native runtimes/osx-x64/native runtimes/osx-arm64/native
          cp artifacts/oqs-win-x64/oqs.dll runtimes/win-x64/native/ || true
          cp artifacts/oqs-win-arm64/oqs.dll runtimes/win-arm64/native/ || true
          cp artifacts/oqs-linux-x64/liboqs.so runtimes/linux-x64/native/ || true
          cp artifacts/oqs-linux-arm64/liboqs.so runtimes/linux-arm64/native/ || true
          cp artifacts/oqs-osx-x64/liboqs.dylib runtimes/osx-x64/native/ || true
          cp artifacts/oqs-osx-arm64/liboqs.dylib runtimes/osx-arm64/native/ || true

      - name: Pack NuGet
        run: dotnet pack -c Release --no-build

      - name: Upload NuGet artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: bin/Release/*.nupkg